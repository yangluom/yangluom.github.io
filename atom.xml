<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时间仍在，我们飞逝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangluom.github.io/"/>
  <updated>2019-09-01T16:41:06.502Z</updated>
  <id>https://yangluom.github.io/</id>
  
  <author>
    <name>Yang Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>抓取每日biying图片</title>
    <link href="https://yangluom.github.io//blog/2019/09/01/%E6%8A%93%E5%8F%96%E6%AF%8F%E6%97%A5biying%E5%9B%BE%E7%89%87/"/>
    <id>https://yangluom.github.io//blog/2019/09/01/抓取每日biying图片/</id>
    <published>2019-09-01T15:49:31.000Z</published>
    <updated>2019-09-01T16:41:06.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抓取每日biying图片"><a href="#抓取每日biying图片" class="headerlink" title="抓取每日biying图片"></a>抓取每日biying图片</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p><a href="https://cn.bing.com/" target="_blank" rel="noopener">必应</a>每天更新的图片是相当的精致的（在线查看的话，推荐<a href="https://bing.ioliu.cn/" target="_blank" rel="noopener">NinexCss做的壁纸</a>网站啦，<a href="https://github.com/xCss/bing" target="_blank" rel="noopener">代码地址</a>也可以点击查看），个人以为是微软的又一良心之作，当然，巨硬家的良心之作还是很多的^_^。最初想着，每天开机的时候就能够把biying的图片自动改为桌面就好了，当然，这个也是实现了的，不过有的桌面壁纸的确不太适合本人的风格，但并不妨碍图片依旧很美腻，索性，直接就写了个东西（好吧，我承认，最初是根据<a href="https://blog.csdn.net/icevmj/article/details/78890552" target="_blank" rel="noopener">FransicZhang</a>写的改的），每天开机时，自动去抓取biying的图片，放在一个文件夹里，对，那种感觉就是，翻着看起来就感到很开心的了。<br>当然，修改的主要原因是，图片链接 <a href="https://area.sinaapp.com/bingImg/" target="_blank" rel="noopener">https://area.sinaapp.com/bingImg/</a>  的图片命名方式好像变化了，导致图片用原来的python脚本抓取不到了，这里主要改了下存回本地的图片的命名方式。。。。<br> <a id="more"></a></p><h2 id="扣子"><a href="#扣子" class="headerlink" title="扣子"></a>扣子</h2><p>我的系统是Win10 64位，python3也已经安装在系统中并加入了系统环境变量里面。剩下的，废话不多说了，直接上python3的代码吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import urllib.request</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests         </span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(img_url,dirname)</span>:</span></span><br><span class="line">    <span class="comment">#保存图片到磁盘文件夹dirname中</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirname):</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'文件夹'</span>,dirname,<span class="string">'不存在，重新建立'</span>)</span><br><span class="line">            <span class="comment">#os.mkdir(dirname)</span></span><br><span class="line">            os.makedirs(dirname)</span><br><span class="line">        <span class="comment">#获得图片文件名，包括后缀</span></span><br><span class="line">        basename1 = os.path.basename(img_url)</span><br><span class="line">        basename = basename1.lstrip(<span class="string">'th\\?id=OHR.'</span>).rstrip(<span class="string">'&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp'</span>)</span><br><span class="line">        print(<span class="string">'basename:'</span>, basename)</span><br><span class="line">        <span class="comment">#拼接目录与文件名，得到图片路径</span></span><br><span class="line">        filepath = os.path.join(dirname, basename+<span class="string">".jpg"</span>)</span><br><span class="line">        <span class="comment">#下载图片，并保存到文件夹中</span></span><br><span class="line">        urllib.request.urlretrieve(img_url,filepath)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'文件操作失败'</span>,e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'错误 ：'</span>,e)</span><br><span class="line">    print(<span class="string">"Save"</span>, filepath, <span class="string">"successfully!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filepath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求网页，跳转到最终 img 地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_url</span><span class="params">(raw_img_url = <span class="string">"https://area.sinaapp.com/bingImg/"</span>)</span>:</span></span><br><span class="line">    r = requests.get(raw_img_url)       </span><br><span class="line">    img_url = r.url <span class="comment"># 得到图片文件的网址</span></span><br><span class="line">    print(<span class="string">'img_url:'</span>, img_url)</span><br><span class="line">    <span class="keyword">return</span> img_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片绝对路径 filepath 所指向的图片为壁纸</span></span><br><span class="line"><span class="comment">#def set_img_as_wallpaper(filepath):</span></span><br><span class="line"><span class="comment">#    ctypes.windll.user32.SystemParametersInfoW(20, 0, filepath, 0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    dirname = <span class="string">"D:/python/biying/biyingw"</span>       <span class="comment"># 图片要被保存在的位置</span></span><br><span class="line">    img_url = get_img_url()</span><br><span class="line">    filepath = save_img(img_url, dirname)   <span class="comment"># 图片文件的的路径</span></span><br><span class="line"><span class="comment">#    set_img_as_wallpaper(filepath)</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>然后，可以写个BiyingPicCrawl.bat在上面.py存放的文件夹里，然后设置BiyingPicCrawl.bat文件开机启动，就可以实现每天开机时，自动去抓取biying的图片的目的了。。。。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">python biyingwall.py</span><br></pre></td></tr></table></figure><h2 id="小感想"><a href="#小感想" class="headerlink" title="小感想"></a>小感想</h2><p>这小伎俩算是鸡鸣狗盗的范畴吧，但是，看到图片取回本地保持着，还是很开心的啦。<br>再附一张好看的图片吧<br><img src="https://i.loli.net/2019/09/02/Hhi2Mvu8RDJqFdL.jpg" alt="BabySloth_ZH-CN8329403615_1920x1080.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;抓取每日biying图片&quot;&gt;&lt;a href=&quot;#抓取每日biying图片&quot; class=&quot;headerlink&quot; title=&quot;抓取每日biying图片&quot;&gt;&lt;/a&gt;抓取每日biying图片&lt;/h1&gt;&lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cn.bing.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;必应&lt;/a&gt;每天更新的图片是相当的精致的（在线查看的话，推荐&lt;a href=&quot;https://bing.ioliu.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NinexCss做的壁纸&lt;/a&gt;网站啦，&lt;a href=&quot;https://github.com/xCss/bing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码地址&lt;/a&gt;也可以点击查看），个人以为是微软的又一良心之作，当然，巨硬家的良心之作还是很多的^_^。最初想着，每天开机的时候就能够把biying的图片自动改为桌面就好了，当然，这个也是实现了的，不过有的桌面壁纸的确不太适合本人的风格，但并不妨碍图片依旧很美腻，索性，直接就写了个东西（好吧，我承认，最初是根据&lt;a href=&quot;https://blog.csdn.net/icevmj/article/details/78890552&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FransicZhang&lt;/a&gt;写的改的），每天开机时，自动去抓取biying的图片，放在一个文件夹里，对，那种感觉就是，翻着看起来就感到很开心的了。&lt;br&gt;当然，修改的主要原因是，图片链接 &lt;a href=&quot;https://area.sinaapp.com/bingImg/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://area.sinaapp.com/bingImg/&lt;/a&gt;  的图片命名方式好像变化了，导致图片用原来的python脚本抓取不到了，这里主要改了下存回本地的图片的命名方式。。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://yangluom.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>蛋白质-DNA互作研究--技术更迭！</title>
    <link href="https://yangluom.github.io//blog/2019/08/29/%E8%9B%8B%E7%99%BD%E8%B4%A8-DNA%E4%BA%92%E4%BD%9C%E7%A0%94%E7%A9%B6-%E6%8A%80%E6%9C%AF%E6%9B%B4%E8%BF%AD%EF%BC%81/"/>
    <id>https://yangluom.github.io//blog/2019/08/29/蛋白质-DNA互作研究-技术更迭！/</id>
    <published>2019-08-28T17:14:11.000Z</published>
    <updated>2019-08-28T18:21:24.864Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="蛋白质-DNA互作研究–技术更迭！"><a href="#蛋白质-DNA互作研究–技术更迭！" class="headerlink" title="蛋白质-DNA互作研究–技术更迭！"></a>蛋白质-DNA互作研究–技术更迭！</h1><p>依然是为了避免重复造轮子的优化，本文基于<a href>诺唯赞生物</a>的文章<a href="https://mp.weixin.qq.com/s?__biz=MjM5NTcwMTA2Mw==&mid=2652655307&idx=1&sn=3109da49be7fac32a16d327c3f1a3fcd&chksm=bd1c66e38a6beff52710f522d956eb3714aaceb218154d478b04f2c8b59903b76df08fcb6584&mpshare=1&scene=1&srcid=&sharer_sharetime=1567012310911&sharer_shareid=816f734c3d2fb29668df8cecf587ddcc&key=0d403d3babf6608ff26b9e6687babddca52554420a490eef7a4a21adaea02c98eaf710a20ad1203a64a4bf24ccd85bcc9beda6745905cbc5fa9055ba81a249dfdfd7e8efefae1a4a027a2dd19cdafe4e&ascene=1&uin=MjY0MDM3MDU4MA%3D%3D&devicetype=Windows+10&version=62060833&lang=zh_CN&pass_ticket=6gwo2Bf6dV46tyX%2Faxvh4h1TP0enAKg0RlnXua84G0LiV1QMmIvVYYHJ8kZwdImY" target="_blank" rel="noopener">干货 | 蛋白质-DNA互作研究那些你不知道的技术更迭！</a>进行修改与补充。<br>蛋白质与DNA互作是基因转录调控的关键，也是启动基因转录的前提。蛋白质与DNA互作主要包括组蛋白、转录因子、DNA甲基化酶和染色质重塑复合物等。为了研究蛋白质-DNA互作，科学家发明了很多方法：凝胶阻滞、DNaseⅠ足迹实验、甲基化干扰、体内足迹、酵母杂交、ChIP-Seq等。其中ChIP-Seq可以真实、完整地反映结合在DNA序列上的靶蛋白，是目前研究蛋白质-DNA互作的经典方法。但该技术需要大量细胞，且步骤繁琐，耗时较长，因此，研究者不断在寻找新的替代方法。<br>2019年4月Thomas G Fazzio教授等发表在Cell期刊的uliCUT&amp;RUN技术，将蛋白质-DNA互作研究升级到单细胞水平。近几个月来，又相继有文章报道了CUT&amp;Tag等技术，进一步优化了蛋白质-DNA互作研究方法，本文将对系列方法一并总结介绍。</p><h2 id="01-蛋白质-DNA相互作用技术发展历程"><a href="#01-蛋白质-DNA相互作用技术发展历程" class="headerlink" title="01 蛋白质-DNA相互作用技术发展历程"></a>01 蛋白质-DNA相互作用技术发展历程</h2><table><thead><tr><th align="center">时间</th><th align="left">技术</th></tr></thead><tbody><tr><td align="center">1997年</td><td align="left">Orlando等研发出ChIP[1]，主要用于研究转录因子与DNA结合位点的序列信息。</td></tr><tr><td align="center">2009年</td><td align="left">Dominic Schmidt等将ChIP与高通量测序技术结合，发明了ChIP-seq，能够在全基因组范围内检测与蛋白相互作用的DNA区域。</td></tr><tr><td align="center">2017年</td><td align="left">Henikoff等发布CUT&amp;RUN技术，使用微球菌核酸酶（micrococcal nuclease, MNase）进行染色质切割替代ChIP-seq中的超声打断，使得蛋白-DNA互作研究从ChIP-seq所需的104级别降到100-1000个细胞。</td></tr><tr><td align="center">2019年</td><td align="left">Thomas G Fazzio教授等发布uliCUT&amp;RUN，将CUT&amp;RUN技术升级到单细胞水平，并应用于早期胚胎研究。</td></tr><tr><td align="center">2019年</td><td align="left">Henikoff等发明CUT&amp;Tag，使用带有接头的Tn5转座酶替代MNase，简化实验操作，将细胞量从104级别降到60个细胞甚至单细胞。</td></tr></tbody></table><h2 id="02-蛋白质-DNA相互作用技术概述"><a href="#02-蛋白质-DNA相互作用技术概述" class="headerlink" title="02 蛋白质-DNA相互作用技术概述"></a>02 蛋白质-DNA相互作用技术概述</h2> <a id="more"></a><h3 id="✦染色质免疫共沉淀（ChIP）"><a href="#✦染色质免疫共沉淀（ChIP）" class="headerlink" title="✦染色质免疫共沉淀（ChIP）:"></a>✦染色质免疫共沉淀（ChIP）:</h3><p>ChIP是全基因组范围内检测蛋白-DNA互作的标准方法，该技术由Orlando等于1997年创立<sup>[1]</sup>。</p><p><img src="https://i.loli.net/2019/08/29/QYPgJdUFWcXE7nO.png" alt="01.png"></p><center>图1：ChIP 基本原理图<sup>[1]</sup></center><h4 id="✦ChIP原理："><a href="#✦ChIP原理：" class="headerlink" title="✦ChIP原理："></a>✦ChIP原理：</h4><p>将染色质和与之相互作用的转录因子和组蛋白通过甲醛等物质交联起来，然后通过超声将染色质打碎成小片段，加入针对特定转录因子或特殊修饰的组蛋白抗体，通过Protein A/Protein G微球或磁珠将抗体-转录因子-染色质复合物拖下来，通过PCR或测序的方法检测与目的蛋白相结合的DNA序列，进而研究这些转录因子在细胞发育或者生长中的作用位点。</p><h3 id="✦ChIP-seq："><a href="#✦ChIP-seq：" class="headerlink" title="✦ChIP-seq："></a>✦ChIP-seq：</h3><p>ChIP-seq将ChIP技术与二代测序相结合，将ChIP下来的DNA进行二代测序文库构建，能够获取全基因组范围内组蛋白DNA及染色质修饰等DNA区段信息。</p><p><img src="https://i.loli.net/2019/08/29/pZxl41vDKndT6yM.png" alt="02.png"></p><center>图2：ChIP-seq 流程</center><h4 id="✦ChIP-seq原理："><a href="#✦ChIP-seq原理：" class="headerlink" title="✦ChIP-seq原理："></a>✦ChIP-seq原理：</h4><p>将通过ChIP特异性收集到的与目的蛋白结合的DNA片段进行纯化与文库构建，ChIP-seq继承了ChIP的技术难点，需要先用甲醛将与DNA互作的蛋白固定，这个过程会造成一些非相关蛋白交联，形成假阳性。一些作用力小的转录因子或者由于甲醛交联不充分，在超声破碎时会造成假阴性。为了消除背景噪音，则需加大细胞投入量。ChIP以及ChIP-seq无法捕获少量细胞中发生的关键表观基因组学过程， 包括影响胚胎发育，发育疾病，干细胞的过程分化和某些癌症的发生。</p><h3 id="✦CUT-amp-RUN-Cleavage-Under-Targets-and-Release-Using-Nuclease-："><a href="#✦CUT-amp-RUN-Cleavage-Under-Targets-and-Release-Using-Nuclease-：" class="headerlink" title="✦CUT&amp;RUN (Cleavage Under Targets and Release Using Nuclease )："></a>✦CUT&amp;RUN (Cleavage Under Targets and Release Using Nuclease )：</h3><p>Henikoff实验室于2017年1月16日发表在elife上关于CUT&amp;RUN的文章，使得蛋白-DNA互作研究从ChIP-seq所需的10<sup>4</sup>级别降到100 - 1,000个细胞<sup>[2]</sup>。 </p><p><img src="https://i.loli.net/2019/08/29/ZKOWIRnvbL1AQgG.png" alt="03.png"></p><center>图3：CUT&RUN 文章 <sup>[2]</sup></center><h4 id="✦CUT-amp-RUN原理："><a href="#✦CUT-amp-RUN原理：" class="headerlink" title="✦CUT&amp;RUN原理："></a>✦CUT&amp;RUN原理：</h4><p><img src="https://i.loli.net/2019/08/29/YgREoDvyKI2Zm17.png" alt="04.png"></p><center>图4：CUT&RUN 原理 <sup>[3]</sup></center><p>利用连有刀豆蛋白A的磁珠（concanavalin A-coated magnetic beads）结合细胞。使用非离子去污剂洋地黄皂苷进行细胞膜通透。然后孵育靶蛋白（如转录因子, TF）的抗体和Protein A-MNase。抗体和Protein A-MNase能够通过核孔进入细胞核，MNase 通过Protein A 和抗体的介导切割靶蛋白附近的DNA序列。MNase的活化需要Ca2+，可通过加入Ca2+或者螯合剂来启动或终止反应，进而将靶蛋白结合的DNA序列从细胞核中释放到上清中，用以建库。</p><h3 id="✦uliCUT-amp-RUN"><a href="#✦uliCUT-amp-RUN" class="headerlink" title="✦uliCUT&amp;RUN:"></a>✦uliCUT&amp;RUN:</h3><p>2019年4月4日，发表在Cell期刊，文章进一步将该技术升级到单细胞水平，并应用于早期胚胎。升级版CUT&amp;RUN被称为超低量CUT&amp;RUN（ultra-low input CUT&amp;RUN, uliCUT&amp;RUN）。</p><p><img src="https://i.loli.net/2019/08/29/oRm5KHOBXxjqnPd.png" alt="05.png"></p><center>图5：uliCUT&RUN文章 <sup>[4]</sup></center><p>相对于CUT&amp;RUN技术，uliCUT&amp;RUN的改进包括：Buffer、体系、孵育时间、spike-in DNA量以及建库制备和纯化过程。</p><p><img src="https://i.loli.net/2019/08/29/iJzokgG4PrHap2F.png" alt="06.png"></p><center>图6：不同细胞量mESCs的uliCUT&RUN数据结果<sup>[4]</sup></center><p>将不同细胞量mESC的uliCUT&amp;RUN数据中的CTCF和H3K4me3测序结果与已有文献发表的ChIP-seq数据进行read密度可视化比较，发现10个细胞起始量的测序结果可以展现出类似50万细胞量的结合位点富集热图。其中CTCF的结合区更为狭窄集中，而H3K4me3则占据相对宽的区段。</p><h3 id="✦CUT-amp-Tag（Cleavage-Under-Targets-and-Tagmentation）："><a href="#✦CUT-amp-Tag（Cleavage-Under-Targets-and-Tagmentation）：" class="headerlink" title="✦CUT&amp;Tag（Cleavage Under Targets and Tagmentation）："></a>✦CUT&amp;Tag（Cleavage Under Targets and Tagmentation）：</h3><p>Henikoff博士于2019年4月29日发表在Nature Communication上关于CUT&amp;Tag的文章，让细胞量从104级别降到60个细胞甚至单细胞。<br><img src="https://i.loli.net/2019/08/29/oHUX7caPvkiVRm5.png" alt="07.png"></p><center>图7：CUT&Tag文献<sup>[5]</sup></center><h4 id="✦CUT-amp-Tag-原理："><a href="#✦CUT-amp-Tag-原理：" class="headerlink" title="✦CUT&amp;Tag 原理："></a>✦CUT&amp;Tag 原理：</h4><p><img src="https://i.loli.net/2019/08/29/3fk2ZFPEhs64BxI.png" alt="08.png"></p><center>图8：CUT&Tag原理图<sup>[5]</sup></center><p>利用连有刀豆蛋白A的磁珠（concanavalin A-coated magnetic beads）结合细胞（刀豆蛋白A能与细胞膜上的糖蛋白结合）。使用非离子去污剂洋地黄皂苷进行细胞膜通透。然后分步孵育靶蛋白（如转录因子, TF）的抗体（一抗）、二抗、和Protein A-Tn5，抗体和Protein A-Tn5能够通过细胞膜、核孔进入细胞核，Tn5通过Protein A 和抗体的介导切割靶蛋白附近的DNA序列。使用Tn5在进行切割的时候，会在被切割的片段两端加上接头序列，通过PCR扩增直接可以得到二代测序文库。</p><p><img src="https://i.loli.net/2019/08/29/EItw1u8bADUidlx.png" alt="09.png"></p><center>图9: CUT&Tag、CUT&RUN的peaks鉴定结果与ChIP-seq的对比<sup>[5]</sup></center><p>Henikoff等使用了ChIP-seq、CUT&amp;RUN、CUT&amp;Tag三种方法来对组蛋白H3K27me3进行研究。通过相同的数据量（8M Reads）进行比较分析发现，三种方法对应的染色体景观相似，但是ChIP-seq需要更高的测序深度才能达到去背景噪音的效果，CUT&amp;RUN和CUT&amp;Tag的信噪比远远高于ChIP-seq。</p><h4 id="✦CUT-amp-Tag-单细胞操作流程："><a href="#✦CUT-amp-Tag-单细胞操作流程：" class="headerlink" title="✦CUT&amp;Tag 单细胞操作流程："></a>✦CUT&amp;Tag 单细胞操作流程：</h4><p><img src="https://i.loli.net/2019/08/29/TEyq5BurAeKUkd8.png" alt="10.png"></p><center>图10：单细胞CUT&Tag操作流程<sup>[5]</sup></center><p>CUT&amp;Tag能够对极少量细胞（60个细胞）进行操作，还可以进行单细胞操作。进行单细胞操作需要将细胞进行分装，由于Protein A-Tn5在细胞内进行，PCR反应之前，切割的核酸均在细胞内， Henikoff博士通过分配单个细胞到5184纳米孔，再加入带随机标签的引物进行扩增的办法，实现单细胞测序。</p><h3 id="✦其他蛋白质-DNA互作研究方法："><a href="#✦其他蛋白质-DNA互作研究方法：" class="headerlink" title="✦其他蛋白质-DNA互作研究方法："></a>✦其他蛋白质-DNA互作研究方法：</h3><p>2019年3月以来，bioRxiv上传了数篇蛋白-DNA互作研究的预印文章，包括CoBATCH<sup>[5]</sup> 和ACT-seq<sup>[6]</sup> 技术等，同样基于Tn5与融合蛋白进行ChIP技术的创新，原理基本相同。</p><h2 id="03-ChIP-seq、CUT-amp-RUN与CUT-amp-Tag技术比较"><a href="#03-ChIP-seq、CUT-amp-RUN与CUT-amp-Tag技术比较" class="headerlink" title="03 ChIP-seq、CUT&amp;RUN与CUT&amp;Tag技术比较"></a>03 ChIP-seq、CUT&amp;RUN与CUT&amp;Tag技术比较</h2><table><thead><tr><th align="center">参数</th><th align="center">ChIP-seq</th><th align="center">CUT&amp;RUN</th><th align="center">CUT&amp;Tag</th></tr></thead><tbody><tr><td align="center">起始细胞量</td><td align="center">~ 10<sup>6</sup> cells</td><td align="center">&gt; 10<sup>3</sup> cells</td><td align="center">&gt; 60 cells</td></tr><tr><td align="center">实验操作时间</td><td align="center">3 ~ 4 天</td><td align="center">1天</td><td align="center">1天</td></tr><tr><td align="center">信噪比</td><td align="center">低</td><td align="center">高</td><td align="center">高</td></tr><tr><td align="center">数据重复性</td><td align="center">低</td><td align="center">高</td><td align="center">高</td></tr></tbody></table><h2 id="04-CUT-amp-RUN与CUT-amp-Tag核心技术"><a href="#04-CUT-amp-RUN与CUT-amp-Tag核心技术" class="headerlink" title="04 CUT&amp;RUN与CUT&amp;Tag核心技术"></a>04 CUT&amp;RUN与CUT&amp;Tag核心技术</h2><p><strong>Protein A-Tn5、Protein G-Tn5以及 Protein A-MNase三种酶是CUT&amp;Tag、CUT&amp;RUN技术中的关键核心酶。</strong> 由于CUT&amp;Tag、CUT&amp;RUN均是针对极低起始量细胞进行实验，因此对核心酶原料有极高要求。</p><p>首先是Tn5转座酶需要具有高活性，才能保证对微量DNA的高灵敏度和高亲和力，有效抓取数十个细胞中的有限结合位点；第二，由于Tn5转座酶对DNA的高亲和力，纯化过程中易产生非特异核酸残留。应用在仅有数十个细胞的CUT&amp;Tag实验中，非特异核酸残留会对建库效果和测序数据产生较大影响。因此，选择CUT&amp;Tag用酶时，一方面需要对Tn5转座酶进行定向进化和突变，选择高活性突变株；另一方面，需要有较高的蛋白纯化工艺，尽可能降低非特异核酸残留。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Orlando, V., Strutt, H., &amp; Paro, R. (1997). Analysis of chromatin structure byin VivoFormaldehyde cross-linking. Methods, 11(2), 205-214.</p><p>[2] Skene, P.J., and Henikoff, S. (2017). An efficient targeted nuclease strategy for high-resolution mapping of DNA binding sites. eLife 6, e21856.</p><p>[3] Skene, P.J., Henikoff, J.G., and Henikoff, S. (2018). Targeted in situ genomewide profiling with high efficiency for low cell numbers. Nat. Protoc. 13, 1006–1019.</p><p>[4] Kaya-Okur, H. S., Wu, S. J., Codomo, C. A., Pledger, E. S., Bryson, T. D., Henikoff, J. G., … &amp; Henikoff, S. (2019). CUT&amp;Tag for efficient epigenomic profiling of small samples and single cells. Nature communications, 10(1), 1930.</p><p>[5] Wang, Q., Xioong, H., Ai, S., Yu, X., Liu, Y., Zhang, J., &amp; He, A. (2019). CoBATCH for high-throughput single-cell epigenomic profiling. bioRxiv, 590661.</p><p>[6] Carter, B., Ku, W. L., Tang, Q., Kang, J. Y., &amp; Zhao, K. (2019). Mapping Histone Modifications in Low Cell Number and Single Cells Using Antibody-guided Chromatin Tagmentation (ACT-seq). bioRxiv, 571208.</p><p>[7] Wu J, Huang B, Chen H, et al. The landscape of accessible chromatin in mammalian preimplantation embryos[J]. Nature, 2016, 534(7609): 652.</p><p>[8] Zheng C, Zheng L, Yoo J K, et al. Landscape of infiltrating T cells in liver cancer revealed by single-cell sequencing[J]. Cell, 2017, 169(7): 1342-1356. e16.</p><p>[9] Zhang L, Yu X, Zheng L, et al. Lineage tracking reveals dynamic relationships of T cells in colorectal cancer[J]. Nature, 2018, 564(7735): 268.</p><p>[10] Han X, Wang R, Zhou Y, et al. Mapping the mouse cell atlas by microwell-seq[J]. Cell, 2018, 172(5): 1091-1107. e17.</p><p>[11] Wu J, Xu J, Liu B, et al. Chromatin analysis in human early development reveals epigenetic transition during ZGA[J]. Nature, 2018, 557(7704): 256.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;蛋白质-DNA互作研究–技术更迭！&quot;&gt;&lt;a href=&quot;#蛋白质-DNA互作研究–技术更迭！&quot; class=&quot;headerlink&quot; title=&quot;蛋白质-DNA互作研究–技术更迭！&quot;&gt;&lt;/a&gt;蛋白质-DNA互作研究–技术更迭！&lt;/h1&gt;&lt;p&gt;依然是为了避免重复造轮子的优化，本文基于&lt;a href&gt;诺唯赞生物&lt;/a&gt;的文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NTcwMTA2Mw==&amp;mid=2652655307&amp;idx=1&amp;sn=3109da49be7fac32a16d327c3f1a3fcd&amp;chksm=bd1c66e38a6beff52710f522d956eb3714aaceb218154d478b04f2c8b59903b76df08fcb6584&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1567012310911&amp;sharer_shareid=816f734c3d2fb29668df8cecf587ddcc&amp;key=0d403d3babf6608ff26b9e6687babddca52554420a490eef7a4a21adaea02c98eaf710a20ad1203a64a4bf24ccd85bcc9beda6745905cbc5fa9055ba81a249dfdfd7e8efefae1a4a027a2dd19cdafe4e&amp;ascene=1&amp;uin=MjY0MDM3MDU4MA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=6gwo2Bf6dV46tyX%2Faxvh4h1TP0enAKg0RlnXua84G0LiV1QMmIvVYYHJ8kZwdImY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;干货 | 蛋白质-DNA互作研究那些你不知道的技术更迭！&lt;/a&gt;进行修改与补充。&lt;br&gt;蛋白质与DNA互作是基因转录调控的关键，也是启动基因转录的前提。蛋白质与DNA互作主要包括组蛋白、转录因子、DNA甲基化酶和染色质重塑复合物等。为了研究蛋白质-DNA互作，科学家发明了很多方法：凝胶阻滞、DNaseⅠ足迹实验、甲基化干扰、体内足迹、酵母杂交、ChIP-Seq等。其中ChIP-Seq可以真实、完整地反映结合在DNA序列上的靶蛋白，是目前研究蛋白质-DNA互作的经典方法。但该技术需要大量细胞，且步骤繁琐，耗时较长，因此，研究者不断在寻找新的替代方法。&lt;br&gt;2019年4月Thomas G Fazzio教授等发表在Cell期刊的uliCUT&amp;amp;RUN技术，将蛋白质-DNA互作研究升级到单细胞水平。近几个月来，又相继有文章报道了CUT&amp;amp;Tag等技术，进一步优化了蛋白质-DNA互作研究方法，本文将对系列方法一并总结介绍。&lt;/p&gt;
&lt;h2 id=&quot;01-蛋白质-DNA相互作用技术发展历程&quot;&gt;&lt;a href=&quot;#01-蛋白质-DNA相互作用技术发展历程&quot; class=&quot;headerlink&quot; title=&quot;01 蛋白质-DNA相互作用技术发展历程&quot;&gt;&lt;/a&gt;01 蛋白质-DNA相互作用技术发展历程&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;时间&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;技术&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1997年&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Orlando等研发出ChIP[1]，主要用于研究转录因子与DNA结合位点的序列信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2009年&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Dominic Schmidt等将ChIP与高通量测序技术结合，发明了ChIP-seq，能够在全基因组范围内检测与蛋白相互作用的DNA区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2017年&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Henikoff等发布CUT&amp;amp;RUN技术，使用微球菌核酸酶（micrococcal nuclease, MNase）进行染色质切割替代ChIP-seq中的超声打断，使得蛋白-DNA互作研究从ChIP-seq所需的104级别降到100-1000个细胞。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2019年&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Thomas G Fazzio教授等发布uliCUT&amp;amp;RUN，将CUT&amp;amp;RUN技术升级到单细胞水平，并应用于早期胚胎研究。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2019年&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Henikoff等发明CUT&amp;amp;Tag，使用带有接头的Tn5转座酶替代MNase，简化实验操作，将细胞量从104级别降到60个细胞甚至单细胞。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;02-蛋白质-DNA相互作用技术概述&quot;&gt;&lt;a href=&quot;#02-蛋白质-DNA相互作用技术概述&quot; class=&quot;headerlink&quot; title=&quot;02 蛋白质-DNA相互作用技术概述&quot;&gt;&lt;/a&gt;02 蛋白质-DNA相互作用技术概述&lt;/h2&gt;
    
    </summary>
    
    
      <category term="蛋白质-DNA互作" scheme="https://yangluom.github.io/tags/%E8%9B%8B%E7%99%BD%E8%B4%A8-DNA%E4%BA%92%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Nature 投稿: 格式指南</title>
    <link href="https://yangluom.github.io//blog/2019/08/21/Nature-%E6%8A%95%E7%A8%BF-%E6%A0%BC%E5%BC%8F%E6%8C%87%E5%8D%97/"/>
    <id>https://yangluom.github.io//blog/2019/08/21/Nature-投稿-格式指南/</id>
    <published>2019-08-20T17:08:21.000Z</published>
    <updated>2019-08-20T17:38:16.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nature-投稿-格式指南"><a href="#Nature-投稿-格式指南" class="headerlink" title="Nature 投稿: 格式指南"></a>Nature 投稿: 格式指南</h1><p>为避免重造轮子，本文主要是在<a href="http://www.cailiaoniu.com/6285.html" target="_blank" rel="noopener">材料牛  SCI丨科研必备：Nature 投稿指南</a>的基础上进行补充和修改。</p><p>本指南翻译了投稿Nature在格式上的一些<a href="https://www.nature.com/nature/for-authors/formatting-guide" target="_blank" rel="noopener">要求</a>。除了投稿指南，还可以通过阅读Nature杂志上面的文章（打印版或online版）来熟悉Nature的内容和写作风格。</p><h2 id="1-Nature稿件的格式"><a href="#1-Nature稿件的格式" class="headerlink" title="1 Nature稿件的格式"></a>1 Nature稿件的格式</h2> <a id="more"></a><p>对于原创研究性文章，Nature的主要格式有Articles 和 Letters。此外，Nature还出版其他的投稿材料，详述如下（1.4节）。</p><h3 id="1-1-Articles"><a href="#1-1-Articles" class="headerlink" title="1.1 Articles"></a>1.1 Articles</h3><p>Articles应是原创报道，其结论代表了对一个重要问题理解的实质性进展，并具有直接、深远的影响。通常不超过5页的Nature journal page，并且不超过50篇参考文献。 （纯文本每页约1300字。）Articles需提供一个最多150字且与正文分离的摘要（一般期刊都有这样的要求）。摘要不能有参考文献，并且不包含数字、缩写、缩略语或测试方法（除非必要）。【编外话： Nature 524, 450; Nature 444, 347; Nature 516, 78这三篇文章在摘要中都引用了参考文献，感觉Nature期刊这种情况较常见，但是其他期刊很少见到摘要中引用参考文献的情况出现。】</p><p>摘要目的是让在该学科之外的读者可以理解文章的研究内容。摘要包括：2-3句关于研究背景的基本介绍；主要结论的陈述（由短语Here we show 或其他等效词引出）；2-3句关于该实验发现或结论如何推动该领域的发展的总结。【编外话：Nature投稿指南中关于摘要的详细要求在我们写文章时，对于摘要的写作提供了一个非常好的借鉴，这样的高要求同样适用于其他期刊的文章。】</p><p>Articles一般在3000字左右，在进行简洁明确的实验数据讨论或解释之前需对研究背景做一个500字左右的介绍（与摘要部分有一定的重复也可以），同时文章以一个或者两个简短的总结段落结尾。</p><p>正文可以包含小标题，总共不超过6个，每个不超过40个字符（包括空格），即小标题的文本长度少于一行。Articles通常有5-6个展示项目（图或表）。</p><h3 id="1-2-Letters"><a href="#1-2-Letters" class="headerlink" title="1.2 Letters"></a>1.2 Letters</h3><p>Letters是比较简短的原创研究报告，其重要性意味着该原创研究能够引起其他领域研究人员的关注。</p><p>Letters一般不超过4页的Nature journal page，并且不超过30篇参考文献。Letters以一个完全引用的段落开始, 约200字, 最多不超过300字。该段的目的在于可以使得其他学科的读者能够理解所研究的内容。该段应以2-3个研究领域基本介绍的句子开头；其次用一句话声明主要结论（以“Here we show”或其等效词开头）; 最后，2-3句关于该实验发现或结论如何推动该领域的发展的总结。</p><p>请参考annotated example,了解应该怎么写Letters的摘要段。</p><p>正文的其余部分大约1500字。为了简要概括与所做工作相关的内容，正文末尾的所有讨论都要简洁，不要重复论文前面的总结或介绍材料。</p><p>Letters通常有3 - 4个展示项目（图或表）。</p><p>字数统计指的是文章的正文。引用、标题、作者和致谢不包含在总字数内。</p><h3 id="1-3-Brief-Communications-Arising-and-Corrections"><a href="#1-3-Brief-Communications-Arising-and-Corrections" class="headerlink" title="1.3 Brief Communications Arising and Corrections"></a>1.3 Brief Communications Arising and Corrections</h3><p>Brief Communications Arising是指：对发表在Nature上的原创研究论文或其它同行评议材料做出的特别有趣或重要的评论。它们只在网上公布但不出版。</p><p>关于投递Corrections的更多细节，请阅读Brief Communications Arising。（Corrections这种情况一般发生在文章接受以后出现的未被编辑和审稿人发现的错误用的。）</p><h3 id="1-4-Other-contributions-to-Nature"><a href="#1-4-Other-contributions-to-Nature" class="headerlink" title="1.4 Other contributions to Nature"></a>1.4 Other contributions to Nature</h3><p>我们常用的一般为Article和Letter这两种形式，我们重点对这两种形式文章的投稿要求进行了详解。Nature还有其他类型的文章，在此我们没有进行过多解释。有关其他类型的文章的投稿请打开链接（other submitted material）来查看其它类型的稿件和有关详细内容。包括：News and Comment；Correspondence；Obituaries；Opinion；Books &amp; Arts；Futures；News &amp; Views；Insights, Reviews and Perspectives；Analysis；Hypothesis；Careers；Technology Features；Outlooks。</p><h2 id="2-编辑过程"><a href="#2-编辑过程" class="headerlink" title="2 编辑过程"></a>2 编辑过程</h2><p>打开链接（getting published in Nature）查看Nature上发布的有关出版、稿件评审和投稿之后编辑如何处理论文的说明。文章提交给Nature即表明所有作者都已经同意文章上的所有内容。更多细节请参见（authorship policy）。</p><h2 id="3-送审前评估"><a href="#3-送审前评估" class="headerlink" title="3 送审前评估"></a>3 送审前评估</h2><p>如果您想询问您的Article 或 Letter是否适合Nature，请使用Nature的在线预提交咨询服务（presubmission enquiry service）。所有的预提交咨询必须包含一个给编辑的封面段（阐明广泛的科学的读者兴趣），一个完整的引用总结段落（用Letters to Nature的风格来写）和参考文献。</p><h2 id="4-可读性"><a href="#4-可读性" class="headerlink" title="4 可读性"></a>4 可读性</h2><p>Nature是一个覆盖所有科学领域的国际性杂志。因此，稿件应该简明扼要, 这样可以让其他学科领域的读者或者英语非母语的读者容易理解。</p><p>重要且专业化的术语应该简洁而不是说教式的解释。</p><p>对于基因、蛋白质和其他专业名称，作者可以使用其习惯的用法，但是首次出现需给出其标准形式。【编外话：所有的期刊一般都有这样的要求：专业术语以及后文中常出现的组合词可以简写，但是首次出现需给出标准形式。】Nature青睐作者使用国际商定的命名法; 详细内容见author policies。网络发布的正式描述新物种的特殊情况也请注明。</p><p>在投稿正式接收之前，Nature的编辑会就有关格式问题给出详细的建议。Nature的编辑常常建议修改标题，改写Articles的摘要和Letters的第一段，这样可以使得广大的读者容易明白所得到的结论。</p><p>文章接收后，Nature的副编辑（文字编辑）确保文中的文字和图形可以让领域外的人读懂，会把文章编辑为Nature自己的风格。副编辑特别重视摘要段，整体清晰度，图，图的格式和标题。</p><p>编辑部会给作者寄去校样，并欢迎作者与Nature杂志的副编辑就修改意见进行讨论，但Nature杂志对于论文的格式和图形的大小有关的问题有最终决定权。</p><h2 id="5-Format-of-Articles-and-Letters"><a href="#5-Format-of-Articles-and-Letters" class="headerlink" title="5 Format of Articles and Letters"></a>5 Format of Articles and Letters</h2><p>稿件应使用双倍行距并用英语写作。</p><p>稿件的组织形式：标题，正文，方法，参考文献，补充材料（如果有的话），致谢，作者的贡献，作者信息（包含数据沉积说明（data deposition statement），竞争利益申报以及相应的作者线（competing interest declaration and corresponding author line）），表格，图的说明。</p><p>对于首次提交的稿件，为了便于审稿期刊要求文字和图片合并在一个文件中（Microsoft Word或PDF格式，最大不超过30 MB）。一般情况下Word版本的稿件中，图表可以插入在文中的适当位置，也可在稿件的最后单独呈现，无论哪种情况都不能缺少有关图表的注释。另外，Word中需要添加行号及页码 （编外话：这样做的目的即能为审稿提供便利，还能方便我们对于审稿人提出的问题精确定位。例：Page xxx, Line xxx）。</p><h3 id="5-1-Titles"><a href="#5-1-Titles" class="headerlink" title="5.1 Titles"></a>5.1 Titles</h3><p>标题不超过两行。对于标题，Letters尽量不超过 90个字符（包括空格），Articles 尽量不超过75个字符（包括空格）。标题通常不包括数字，首字母缩写词，缩写或标点符号。为了检索的方便性，Title应包括足够的细节，让领域外的读者看到Title就可以明白文章的主要内容。</p><h3 id="5-2-Text"><a href="#5-2-Text" class="headerlink" title="5.2 Text"></a>5.2 Text</h3><p>Articles不超过5页，Letters不超过4页。文本的一整页包含约1300字。此外，一个典型的Article包含约3000字的正文，五个小显示项目（图和/或表格）配有简短的说明，如果合适的话还要有引文和方法部分。一个典型的Letter包含约1500字的正文（不包括Letter的第一段，图表说明，如果合适的话还要有引用和方法部分）和四个小展示项目（图和/或表）与简短的说明。复合图（有几组）通常需要占用大约半页，相当于约600个单词。</p><p>当提交新的稿件或者修改稿时，作者应给编辑附信以说明文章的长度，大概多少页数。稿件如果严重超出了在这里规定的长度或者编辑特别提醒的长度，作者必须将文章缩减才能被接收，这会延迟文章的发表。</p><p>Nature要求作者在稿件末尾的注释部分说明共同作者所做的贡献（参见5.5节）。如果作者认为有必要说明两个或者多个共同作者地位相等，可以用星号将他们标记出来，并且紧接着通讯地址下面写上“These authors contributed equally to this work”（这些作者对该工作贡献相等）。如果地位平等的共同作者超过三个，作者应该在投稿声明中说明。当前地址应写在作者列表的下面，（在第一页的底部脚注规则下），可以用匕首符号来标识; 所有其他必要的与作者相关的解释写在致谢中。</p><p>我们首选的文本格式是微软的Word，要删除标签。</p><p>TeX/LaTeX:如果您使用TeX/LaTeX准备的文章，在您的文章接收之后，排版之前，我们需要将其转换为Word格式。文章的所有文本材料（包括引文，表格，图表标题，在线方法等）应该以单个.tex文件包含在内。</p><p>期刊使用“标准”的字体，最好是12点Times New Roman。对于数学符号，希腊字母和其它特殊字符，使用普通的文字或符号字体（Symbol font）。Word公式编辑器/ 数学公式（MathType）应仅用于那些不能使用普通的文本或符号字体制作的公式 。</p><h3 id="5-3-Methods"><a href="#5-3-Methods" class="headerlink" title="5.3 Methods"></a>5.3 Methods</h3><p>在文本的结尾部分，应当包括方法部分，紧挨着图的说明。方法部分将出现在在线PDF，和全文（HTML）在线版，但在印刷发行时不会出现。方法部分要尽可能的简洁，但应该包含必要的内容，以便解释和实验成果可重复。方法部分通常不超过3000字。作者可以将实验的详细方法保存到Protocol Exchange中（Protocol Exchange），(Protocol Exchange是通过NPG维持的一个开放的资源)。文章出版之后，作者保存在Protocol Exchange在中的详细方法将链接到在线方法部分。</p><p>应避免一些已公开的详细的方法; 可以提供一个参考文献，以节省空间。</p><p>方法部分要用简短的粗体标题进行细分，方法部分可以包括数据统计，试剂，动物模型等特定的部分。如果该部分包括引用，编号应与文章其余部分的最后一个参考文献编号连续，并且列表应挨着文章末尾的附加方法部分。</p><p>方法部分不能包含图或表（基本显示项目应包括在扩展数据中）。</p><h3 id="5-4-References"><a href="#5-4-References" class="headerlink" title="5.4 References"></a>5.4 References</h3><p>参考文献需要数字编号，并需要按照其在文章中的出现顺序依次编号。相应的具体参考文献的格式可以下载几篇Nature上面的文献即可明确。【编外话：在投稿之前，我们通常都是采用最新几期该期刊出版的文章的格式作为参考，来对我们自己的文章进行格式化，这其中就包括了参考文献的具体格式。】</p><p>文中添加引用时，参考文献序号要使用上标，只有当这些序号可能和一些上标的数字混淆时才可以把参考文献的序号放到括号内。</p><p>不要使用链接字段（由Endnote和类似的程序产生的）。在保存文件之前，请使用Endnote提供的一键移除按钮将EndNote的代码移除。</p><p>引文的数量是有严格限制的。Article最多50个引文，Letter最多30个。每个序号后只能有一个引文。</p><p>只有已经出版或者已经提交给某个出版机构的的文章才可以写到引文列表中。正在准备的论文应该在文中以一个作者列表的形式被提及（或者缩写，作者中的任何人是目前稿件的共同作者。）出版的会议摘要，编号的专利和预印本可以包括在引文列表中。（我们邀请作者写的综述，提供的观点和有见解的文章，作为突出引用可以例外）如果参考文献的作者不超过5个，所有的作者都要包含在内。如果参考文献的作者超过5个，只写出第一作者，后面写上“et al”。</p><p>在准备参考文献时，请按照以下Nature发布的版本风格：</p><p>  a. 作者应该首先列出姓，后跟一个逗号和名的首字母。</p><p>  b. 需要把所有引用的文章的标题给出。在参考文献列表中引用的文章标题应该是正体的，不要用斜体; 标题的第一个字要大写，标题要准确的写出，用一个句号结束。书名中所有主要单词的首字母要用斜体。杂志的标题根据平时的习惯使用斜体和缩写。卷号是粗体的。书需要写出出版商和出版城市。 （请参考Nature发表的论文详细信息。）<br>  c.只适用于网络刊物的引文应该像上面一样给出作者，文章标题和期刊名称，随后是完整的网址或者DOI（对于刚刚上线还没有页码的文章，需要给出DOI号）和出版年（用括号括起来）。【编外话：这里的意思就是Nature也允许引用康奈尔大学Arxiv网站上并未实际接收的文章。】</p><p>  d. 引用网站要给出作者（如果知道的话），引用页面的标题，完整的URL，和发布的年（用括号括起来）。</p><h3 id="5-5-End-notes"><a href="#5-5-End-notes" class="headerlink" title="5.5 End notes"></a>5.5 End notes</h3><p>尾注要简短，位于参考文献下方。请参考我们的annotated example来了解Nature文章的尾注的写法。</p><p>含Supplementary Information的文章，在参考文献之后要有一个声明：Supplementary Information is linked to the online version of the paper at <a href="http://www.nature.com/nature" target="_blank" rel="noopener">www.nature.com/nature</a>.</p><p>Acknowledgements应简短，不应包括感谢匿名审稿人和编辑，或者是热情洋溢的评论，这些无关紧要的话。例如，可以感谢一个人的援助，但不要说“优秀的”援助，或者可以感谢一个人的意见，但不要说成“有见地”的意见。致谢可以包含赠款和捐款数字。</p><p>Author Contributions: 作者需要给出一个声明来明确每一个共同作者所做出的贡献。该声明可以长达几个句子，描述单个作者的任务，作者的顺序按着他们名字首字母的顺序。进一步的解释和例子见authorship policy页。</p><p>Author Information: 作者应包含在本文的最后一组语句中，按以下顺序：</p><p>  a. 如果合适的话，做有关URL和相关公共数据库入口的号码的数据淤结的声明。</p><p>  b. 有一句“Reprints and permissions information is available at <a href="http://www.nature.com/reprints。" target="_blank" rel="noopener">www.nature.com/reprints。</a></p><p>  c. Competing financial interests的声明。</p><p>  d. 有一句“Correspondence and requests for materials should be addressed to XX”，其中XX是指一个E-mail地址。Nature期望这个认定的作者可以对读者的询问和索要材料进行答复，并协调处理与出版的稿件相关的任何问题，包括更正投诉在内。命名为通讯作者的人不一定是资深作者，而作者的名字的公布也并不意味着资历。如果有必要，可以包括一个以上的电子邮件地址，Nature将与第一个地址就有关出版后的事项进行交流，并期望作者与其他共同作者进行协调。</p><h3 id="5-6-Life-sciences-reporting-guidelines"><a href="#5-6-Life-sciences-reporting-guidelines" class="headerlink" title="5.6 Life sciences reporting guidelines"></a>5.6 Life sciences reporting guidelines</h3><p>发送到外部审查的生命科学的研究论文，作者必须有包含自己的有关实验和分析设计的几个要素相关细节的稿件。这些规定旨在提高报告的透明度和公布结果的可重复性。在同行评审中，作者需要填写一份审查清单来确认这些元素包含在稿件中，这份审查清单将会提供给编辑和同行评审者。</p><h3 id="5-7-Tables"><a href="#5-7-Tables" class="headerlink" title="5.7 Tables"></a>5.7 Tables</h3><p>表应在单独的页面上给出，纵向（不能是横向），在页面中间，而不是两侧。</p><p>表要有一行短的标题，字体为黑体。表应尽可能地小。制作表时要牢记：Nature页面的大小是会对表的大小有限制。</p><p>表的下方要解释表中符号和缩写的定义，还要有一些说明性材料，要尽可能的简短，全部是双倍行距。</p><p>X射线细化统计和NMR结构统计要用标准的表。作者应该使用这些标准表作为扩展数据表。这些标准的表可在（forms and declarations）上找到。</p><h3 id="5-8-Figure-legend"><a href="#5-8-Figure-legend" class="headerlink" title="5.8 Figure legend"></a>5.8 Figure legend</h3><p>图的说明作为文本文件的一部分，应一个接一个的列出，与图形文件相分离。不能在每个图下面写一个说明。</p><p>每一个图的说明应以一个简单的标题开始，然后给每个版块和使用的符号一个简短描述。对于有方法部分的稿件，说明中不应含有详细的方法，或超过100个字（对于全文来说总共不超过500字）。在没有方法部分的稿件中，说明应该是少于300字（对于整篇文章来说，要800字或更少）。</p><p>所有误差棒必须在图例中进行定义，如上述5.6节中的讨论。</p><h3 id="5-9-Figures"><a href="#5-9-Figures" class="headerlink" title="5.9 Figures"></a>5.9 Figures</h3><p>Nature需要电子格式的图。请确保所有的图像符合Nature期刊上的图像完整性策略（the Nature journals’ policy on image integrity.）。</p><p>图应尽可能小而简单，兼顾清晰。目的是为了其他或相关学科的读者能够理解，并协助他们理解论文。不必要的图和与图相关的部分（板）应当避免：例如，在小表或直方图给出数据，通常可以在文本中简要说明来代替。避免不必要的复杂性，着色和过多的细节。</p><p>图包含的面板不要超过一个，除非各部分存在逻辑连接;多部分图的每个面板应控制尺寸，使得整体图可以通过相同数量的减少和以可见的最小的尺寸再现在打印页上。Nature的标准图尺寸是89毫米（单列）和183毫米（双列）和页面的全部深度为247毫米。</p><p>氨基酸序列应使用Courier字体（或其他等宽字体），用50或100个字符行的单字母代码进行打印。</p><p>描述化学结构时，要使用自然化学生物学的指导方针。</p><p>对图的准备的一些简单的指导意见：</p><p>Lettering: 图的字体（轴的标签等）应该是小写型，首字母大写，没有句号。</p><p>Units: 单位和数字之间有一个空格，然后按照SI命名法或某一特定领域常用的术语。上千的数字应该用逗号（1，000）分开。不寻常的单位或缩写给出定义。</p><p>Scale bar: 应使用比例尺，而不要用放大因子。</p><p>Layering type: 应避免分层超过阴影或变形区域，不要使用相反的类型（彩色背景上用白色字母）。</p><p>文本，包括键符号，应在图的说明中给出，不要在图中给出。</p><p>Figure quality</p><p>初次提交，图的质量要高，可以让审阅人进行评估，如果单独提供，最好为JPEG格式。如果原稿的文字和图与文件（最初提交的首选格式）不匹配，可插入Word文档或PDF中。关于尺寸，分辨率和标签，建议作者根据最初的和修订的提交准则（initial and revised submissions guidelines）。</p><p>请注意，打印出版的高质量的图比较大，在提交阶段是不利于上传的。即使将这些高质量的图上传到Nature的提交网站，但是很多审阅人不能接收带有大附件的电子邮件。在文章被接收发表时，编辑会向作者索要高质量的图，所以没有必要在提交阶段发送这些高质量的图。</p><p>Third party rights</p><p>Nature不支持使用或者采用以前发表的展示项目（例如，图，表，图像，视频或文本框）。不过，为了一些概念的说明，需要使用公布的数据，这时可以使用先前公布的展示项目。请注意，在这些情况下，我们可能无法获取到重新使用我们论文中的某些图片的权利（原版本，或改编版本）。在这种情况下，我们将与您联系，讨论使用替代材料。</p><p>Figure costs</p><p>稿件中彩色图是需要付费的。目前，第一个彩图我们收取827￡，每增加一个彩图收￡295。如果没有能力支付这笔费用，编辑可以自行决断彩色图的出版问题。但在文章接收前，作者要和编辑达成一致意见。</p><h3 id="5-10-Production-quality-figures"><a href="#5-10-Production-quality-figures" class="headerlink" title="5.10 Production-quality figures"></a>5.10 Production-quality figures</h3><p>原则上，当原稿被接收出版时，编辑会索要高分辨率的图。当编辑索要高分辨率的图时，您再递交该图。在那个阶段，要根据这些准则准备图guidelines.。</p><h3 id="5-11-Extended-Data"><a href="#5-11-Extended-Data" class="headerlink" title="5.11 Extended Data"></a>5.11 Extended Data</h3><p>扩展的数据图和表只在网上有（在线PDF和全文HTML版），但同行评审的展示项目可以给文章和通讯提供必要的背景，由于空间限制或者只有少数专家对此有兴趣，文章的打印版不将其包括在内。扩展数据展示项最多为10个（图和表）。见Composition of a Nature research paper.。</p><p>在出版时，扩展数据表应该从相似的行到表来规定格式（见第5.7节），但主体部分（不包括标题和说明，应该包括在Word文件的结尾）应作为图像单独提交，因为Nature的副编辑部不会对扩展数据表进行编辑。小表也可以作为扩展数据的数据中的子板包括在内。可以阅读扩展数据格式指南，见Extended Data Formatting Guide.。</p><p>扩展数据的图在准备时与在打印中出现的图相比是略有不同的，只要它们大小符合（见 Extended Data Formatting Guide），可以是多版。Nature的美术部不会对扩展数据表进行编辑，为此，当准备这些图时，作者要按照Nature的风格来准备。扩展数据图的说明应该像打印图一样来准备，并在Word文件的末尾一个接着一个的列出。</p><p>如果空间允许，Nature鼓励作者，做一个简单的示意图，作为扩展数据图的一个版块，来总结文章的主要发现（例如，以协助理解细胞内复杂的细节方面，结构和分子生物学学科）。</p><p>如果原稿已有扩展数据图或表，作者要将它们放在正文合适的位置（例如，扩展数据图1和扩展数据表1）。</p><p>如果扩展数据表和扩展数据图的说明中有参考文献，编号应从正文参考文献的末尾接着写（如果存在附加的方法部分，可以从附加方法部分的参考文献的后面接着写）。如果附加方法部分存在列表，扩展列表应添加到附加方法部分的列表的后面。如果没有附加的方法部分，可以添加到扩展数据说明的下面。</p><h3 id="5-12-Supplementary-Information"><a href="#5-12-Supplementary-Information" class="headerlink" title="5.12 Supplementary Information"></a>5.12 Supplementary Information</h3><p>补充信息（Supplementary Information, SI）是同行评审必不可少的背景材料（例如，大的数据集，方法，计算），只在网上发布，但过大或不切实际，或感兴趣的只有少数专家，则不能包含在印刷版本内。详情参见Supplementary Information page。</p><p>补充信息不要包含图（除那些打印时出现的图，这些图应和扩展数据图格式相同）。当表像扩展数据那样不适合格式化时（例如，包含大型数据集的表，或者最适合Excel文件的始数据），才可以包含在补充信息中。</p><p>如果原稿已有SI，在提交或者回复编辑的索要信时，作者应该将补充信息（例如，视频，表）的分散项目放在主原稿的合适的位置。</p><h3 id="5-13-Chemical-structures-and-characterization-of-chemical-materials"><a href="#5-13-Chemical-structures-and-characterization-of-chemical-materials" class="headerlink" title="5.13 Chemical structures and characterization of chemical materials"></a>5.13 Chemical structures and characterization of chemical materials</h3><p>对于Nature关于描述实验方法和新化合物的表征的标准指南，请参阅characterization of chemical materials。对于化学结构，作者应该遵循Nature Chemical Biology guidelines（见Nature Chemical Biology guidelines.）。</p><h2 id="6-Submission"><a href="#6-Submission" class="headerlink" title="6 Submission"></a>6 Submission</h2><p>如果可以的话，文章和信件应在线提交。如果不能在线提交，原稿应该邮递。不要用电子邮件发送。当一起提交时，请务必阅读有关说明信和一些重要内容有关的问题。</p><p>在提交之前，所有投稿人必须同意Nature所有的出版政策。</p><p>作者必须使数据和材料可以公开发布。这包括数据到相关数据库的沉积和安排它们在网上发布的日期，以提高透明度和公布结果的可重复性。Nature的出版政策的完整说明是在the NPG Authors and Referees website（见Authors and Referees website.）。</p><h2 id="7-Other-Nature-and-NPG-journals"><a href="#7-Other-Nature-and-NPG-journals" class="headerlink" title="7 Other Nature and NPG journals"></a>7 Other Nature and NPG journals</h2><p>所有的Nature期刊之间的关系在Nature系列页面提供（见Nature family page）。详细内容请参阅Nature出版集团出版的其他期刊中的Publications and services部分(见Publications and services)。</p><p>感谢原文作者<a href="http://www.cailiaoniu.com/author/bestwishes" target="_blank" rel="noopener">小小</a>，侵删</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nature-投稿-格式指南&quot;&gt;&lt;a href=&quot;#Nature-投稿-格式指南&quot; class=&quot;headerlink&quot; title=&quot;Nature 投稿: 格式指南&quot;&gt;&lt;/a&gt;Nature 投稿: 格式指南&lt;/h1&gt;&lt;p&gt;为避免重造轮子，本文主要是在&lt;a href=&quot;http://www.cailiaoniu.com/6285.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;材料牛  SCI丨科研必备：Nature 投稿指南&lt;/a&gt;的基础上进行补充和修改。&lt;/p&gt;
&lt;p&gt;本指南翻译了投稿Nature在格式上的一些&lt;a href=&quot;https://www.nature.com/nature/for-authors/formatting-guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;要求&lt;/a&gt;。除了投稿指南，还可以通过阅读Nature杂志上面的文章（打印版或online版）来熟悉Nature的内容和写作风格。&lt;/p&gt;
&lt;h2 id=&quot;1-Nature稿件的格式&quot;&gt;&lt;a href=&quot;#1-Nature稿件的格式&quot; class=&quot;headerlink&quot; title=&quot;1 Nature稿件的格式&quot;&gt;&lt;/a&gt;1 Nature稿件的格式&lt;/h2&gt;
    
    </summary>
    
    
      <category term="科研" scheme="https://yangluom.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="格式" scheme="https://yangluom.github.io/tags/%E6%A0%BC%E5%BC%8F/"/>
    
      <category term="Nature" scheme="https://yangluom.github.io/tags/Nature/"/>
    
  </entry>
  
  <entry>
    <title>雄性减数分裂I前期需要组蛋白修饰reader ZCWPW1，而雌性非必须</title>
    <link href="https://yangluom.github.io//blog/2019/08/21/%E9%9B%84%E6%80%A7%E5%87%8F%E6%95%B0%E5%88%86%E8%A3%82I%E5%89%8D%E6%9C%9F%E9%9C%80%E8%A6%81%E7%BB%84%E8%9B%8B%E7%99%BD%E4%BF%AE%E9%A5%B0reader-ZCWPW1%EF%BC%8C%E8%80%8C%E9%9B%8C%E6%80%A7%E9%9D%9E%E5%BF%85%E9%A1%BB/"/>
    <id>https://yangluom.github.io//blog/2019/08/21/雄性减数分裂I前期需要组蛋白修饰reader-ZCWPW1，而雌性非必须/</id>
    <published>2019-08-20T16:03:25.000Z</published>
    <updated>2019-08-20T17:37:33.704Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>减数分裂是一种特殊的细胞分裂类型，该过程可以产生单倍体生殖细胞并通过同源重组确保其遗传多样性。作者发现，在雄性小鼠减数分裂I前期，H3K4me3阅读器ZCWPW1是特异且必须的，而在小鼠的雌性生殖细胞中并无该现象。雄性小鼠<em>Zcwpw1_的缺失会导致联会的完全失败，其缺失致使雄性减数分裂停滞在偶线期到粗线期阶段，并伴有DNA双链断裂修复的不完全和重组交叉形成缺乏，进而导致雄性不育。在卵母细胞中，_Zcwpw1_缺失仅在某种程度上导致减数分裂前期的进程减慢; _Zcwpw1<sup>-/-</sup></em> 卵母细胞能够完成减数分裂，且<em>Zcwpw1<sup>-/-</sup></em> 雌性小鼠的生育能力直到成年中期亦能保持正常。文章结论，H3K4me3 的reader ZCWPW1 对于雄性减数分裂联会是必不可少的，但对于雌性来说并不是必需的。文章结果表明ZCWPW1可能是哺乳动物生殖细胞减数分裂中的一个以前未知，性别依赖的表观遗传调节因子。<br> <a id="more"></a></p><p> 未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;减数分裂是一种特殊的细胞分裂类型，该过程可以产生单倍体生殖细胞并通过同源重组确保其遗传多样性。作者发现，在雄性小鼠减数分裂I前期，H3K4me3阅读器ZCWPW1是特异且必须的，而在小鼠的雌性生殖细胞中并无该现象。雄性小鼠&lt;em&gt;Zcwpw1_的缺失会导致联会的完全失败，其缺失致使雄性减数分裂停滞在偶线期到粗线期阶段，并伴有DNA双链断裂修复的不完全和重组交叉形成缺乏，进而导致雄性不育。在卵母细胞中，_Zcwpw1_缺失仅在某种程度上导致减数分裂前期的进程减慢; _Zcwpw1&lt;sup&gt;-/-&lt;/sup&gt;&lt;/em&gt; 卵母细胞能够完成减数分裂，且&lt;em&gt;Zcwpw1&lt;sup&gt;-/-&lt;/sup&gt;&lt;/em&gt; 雌性小鼠的生育能力直到成年中期亦能保持正常。文章结论，H3K4me3 的reader ZCWPW1 对于雄性减数分裂联会是必不可少的，但对于雌性来说并不是必需的。文章结果表明ZCWPW1可能是哺乳动物生殖细胞减数分裂中的一个以前未知，性别依赖的表观遗传调节因子。&lt;br&gt;
    
    </summary>
    
    
      <category term="meiosis" scheme="https://yangluom.github.io/tags/meiosis/"/>
    
      <category term="histone modification" scheme="https://yangluom.github.io/tags/histone-modification/"/>
    
      <category term="ZCWPW1" scheme="https://yangluom.github.io/tags/ZCWPW1/"/>
    
      <category term="H3K4me3" scheme="https://yangluom.github.io/tags/H3K4me3/"/>
    
      <category term="Epigenetics" scheme="https://yangluom.github.io/tags/Epigenetics/"/>
    
  </entry>
  
  <entry>
    <title>Hello-World之后</title>
    <link href="https://yangluom.github.io//blog/2019/08/09/Hello-World%E4%B9%8B%E5%90%8E/"/>
    <id>https://yangluom.github.io//blog/2019/08/09/Hello-World之后/</id>
    <published>2019-08-09T14:06:44.000Z</published>
    <updated>2019-08-27T18:49:43.021Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>  知道Github能做博客已经有相当长一段时间了，但是，由于能力、精力等多种因素的限制，博客一直处于下图的状态：</p><p><img src="https://i.loli.net/2019/08/09/rQ81lwcifpyDeTs.jpg" alt="01.jpg"></p><p>  说来，十分惭愧，这篇blog也已经从最初的8.09写到了08.12。<br>  作为“Hello， World！”之后的第一篇博客，主要是给自己使用GitPage搭建Blog做个记录，当然，如果能够帮助到后来的小伙伴们，那就更好啦！<br>  工欲善其事必先利其器，然额，贯于GitPage搭建bolg的步骤，目前网上的各种教程较为分散，主要是以成功的在GitPage上成功实现Fork及访问为主，所以，也给很多小伙伴带来了神奇的困惑，自然而然冒出来的问题便是，然后嘞？然后我再咋搞呢？所以，本着如何较系统地从入门到实践的角度，记录下本次从搭建到第一篇博客发布的过程，也算是从本人的角度对使用Github Page搭建博客过程的一个Trouble Shotting的记录。</p> <a id="more"></a><h2 id="本文主要参考以下文章实现"><a href="#本文主要参考以下文章实现" class="headerlink" title="本文主要参考以下文章实现"></a>本文主要参考以下文章实现</h2><blockquote><ol><li><a href="https://div.io/topic/1691" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li><li><a href="http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia/" target="_blank" rel="noopener">Hexo + yilia 搭建博客可能会遇到的所有疑问</a></li><li><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法</a></li><li><a href="https://blog.csdn.net/assassinsshadow/article/details/79820299" target="_blank" rel="noopener">windows 下 git bash 打开特定的文件目录</a></li><li><a href="http://www.w3cschool.cc/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安装Node.js</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网: 快速、简洁且高效的博客框架</a></li><li><a href="https://www.jianshu.com/p/56d99a3049a5" target="_blank" rel="noopener">用Hexo写出第一篇博客</a></li></ol></blockquote><h1 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1. 步骤"></a>1. 步骤</h1><h2 id="1-1-申请Github账号，并创建自己博客的Repositories"><a href="#1-1-申请Github账号，并创建自己博客的Repositories" class="headerlink" title="1.1 申请Github账号，并创建自己博客的Repositories"></a>1.1 申请Github账号，并创建自己博客的<strong>Repositories</strong></h2><p>  想来，这个环节应该是最简单的，网上有无数的教程阔以帮助实现，具体过程不再赘述。<br>  当然，链接提供是必备的啦，详看参考文章1。<br>  需要特别指出的是，每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，对，这个username就是你自己的用户名，这是特殊的命名约定。<br>  比如我的用户名是yangluom，我的blog仓库就是yangluom/yangluom.github.io这个啦。<br>  <img src="https://i.loli.net/2019/08/12/w6Gsdv2VhaPFjMB.jpg" alt="02.jpg"><br>  比方说你得用户名是abc123，那你就可以创建abc123.github.io这个Repositories（资源仓库）,并通过<a href="http://abc123.github.io" target="_blank" rel="noopener">http://abc123.github.io</a> 来访问你的个人主页。<br>  这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p><h2 id="1-2-在本地下载、安装Hexo"><a href="#1-2-在本地下载、安装Hexo" class="headerlink" title="1.2 在本地下载、安装Hexo"></a>1.2 在本地下载、安装Hexo</h2><p>  嗯，这可能是让人小纠结的问题，我既然要在github上搭博客，直接在github上操作不就完了么？其实并不是，这个过程是，你必须先在本地搞定你自己静态网页的内容后，然后部署到github上。<br>  所以，要先实现本地系统的环境配置。要使用Hexo，需要在你的系统中支持Nodejs以及Git。（本部分主要参考<a href="https://div.io/topic/1691" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a>，如有雷同，纯属必然，并无偶然。。。）</p><h3 id="1-2-1-安装Node-js"><a href="#1-2-1-安装Node-js" class="headerlink" title="1.2.1 安装Node.js"></a>1.2.1 安装Node.js</h3><p>  <a href="https://nodejs.org/download/" target="_blank" rel="noopener">下载Node.js</a><br>  由于我使用的操作系统是64位WIN10系统，所以，仅就该系统下如何安装予以展示，其他操作系统的安装，可以参考下文进行：<br>  参考地址：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安装Node.js</a><br>  这次安装，我采用了Node.js v10.16.3 LTS(长期支持版本)版本，如果目前版本已过时，大家可以根据自己使用的操作系统，去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js的官网</a>下载最新的LTS版本软件：<br>  <img src="https://i.loli.net/2019/08/18/hGOUydvKgVPkIF5.jpg" alt="00.jpg"></p><p>  具体安装如下，其他版本安装应该类似：<br>  双击已经下载的安装包，将出现如下界面，点击“Next”继续就可以了；<br>  <img src="https://i.loli.net/2019/08/18/hGOUydvKgVPkIF5.jpg" alt="00.jpg"></p><p>   勾选接受协议选项，点击 next（下一步） 按钮 :<br>   <img src="https://i.loli.net/2019/08/18/NKG9zf6y2qTHRcF.jpg" alt="002.jpg"></p><p>   Node.js默认安装目录为 “C:\Program Files\nodejs&quot; , 你可以修改目录，并点击 next（下一步）：<br>   <img src="https://i.loli.net/2019/08/18/vHh78EGpuztckre.jpg" alt="003.jpg"></p><p>   点击树形图标来选择你需要的安装模式 （如无特殊需求，选项默认就可以啦）, 然后点击下一步 next（下一步），继续进行安装：<br>   <img src="https://i.loli.net/2019/08/18/7iPCVpOgwGy15Nu.jpg" alt="004.jpg"></p><p>   点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）；然后，点击 Finish（完成）按钮退出安装向导，至此，Node.js就已经安装在我们的电脑上啦 。</p><p>   最后，检测一下PATH环境变量是否配置了Node.js：<br>   点击开始→ 运行→ 输入”cmd” → 输入命令”path”，输出如下结果：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">luyou</span>&gt;<span class="title">path</span></span></span><br><span class="line"><span class="function"><span class="title">PATH</span>=<span class="title">C</span>:\<span class="title">WINDOWS</span>\<span class="title">system32</span>;<span class="title">C</span>:\<span class="title">WINDOWS</span>;<span class="title">C</span>:\<span class="title">WINDOWS</span>\<span class="title">System32</span>\<span class="title">Wbem</span>;<span class="title">C</span>:\<span class="title">WINDOWS</span>\<span class="title">System32</span>\<span class="title">WindowsPowerShell</span>\<span class="title">v1</span>.0\;<span class="title">C</span>:\<span class="title">WINDOWS</span>\<span class="title">System32</span>\<span class="title">OpenSSH</span>\;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">MacType</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\;<span class="title">D</span>:\<span class="title">python</span>\<span class="title">pywin</span>\<span class="title">Scripts</span>\;<span class="title">D</span>:\<span class="title">python</span>\<span class="title">pywin</span>\;<span class="title">C</span>:\<span class="title">Users</span>\<span class="title">luyou</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Microsoft</span>\<span class="title">WindowsApps</span>;<span class="title">D</span>:\<span class="title">moe2014</span>\<span class="title">bin</span>;<span class="title">C</span>:\<span class="title">Users</span>\<span class="title">luyou</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">GitHubDesktop</span>\<span class="title">bin</span>;<span class="title">C</span>:\<span class="title">Users</span>\<span class="title">luyou</span>\<span class="title">AppData</span>\<span class="title">Roaming</span>\<span class="title">npm</span></span></span><br></pre></td></tr></table></figure><p>   我们可以看到环境变量中已经包含了C:\Program Files\nodejs\</p><h3 id="1-2-2-安装Git"><a href="#1-2-2-安装Git" class="headerlink" title="1.2.2 安装Git"></a>1.2.2 安装Git</h3><p>  下载地址：<a href="http://git-scm.com/download/" target="_blank" rel="noopener">http://git-scm.com/download/</a></p><blockquote><p>此处可能有的小坑，即git安装后，可能需要在指定目录打开，此时，可以如下操作：</p></blockquote><blockquote><p>找到gitbash快捷图标，右键，点击属性<br>将目标： –cd -to-home 删掉<br>起始位置填写即将打开的路径，如下图。点击【应用】【确定】。</p></blockquote><p><img src="https://i.loli.net/2019/08/13/Y2EMAmZ4jvkxDes.jpg" alt="03.jpg"></p><h3 id="1-2-3-安装Hexo"><a href="#1-2-3-安装Hexo" class="headerlink" title="1.2.3 安装Hexo"></a>1.2.3 安装Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> g:/hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-cli -g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g <span class="comment"># 或者hexo generate</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s <span class="comment"># 或者hexo server，此时，如果系统没报错的话，即可在http://localhost:4000/ 查看</span></span></span><br></pre></td></tr></table></figure><p>现在我们打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。 </p><p>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<br><img src="https://i.loli.net/2019/08/15/AabERYQyLnqUIto.jpg" alt="04.jpg"></p><p>在这里说下Hexo常用的几个命令：</p><blockquote><ol><li>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li><li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li><li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  $</span><span class="bash"> hexo new <span class="string">"postName"</span><span class="comment">#新建文章</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> hexo new page <span class="string">"pageName"</span><span class="comment">#新建页面</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p>常用简写</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  $</span><span class="bash"> hexo n == hexo new<span class="comment">#新建文章</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> hexo g == hexo generate<span class="comment">#生成静态文件</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> hexo s == hexo server<span class="comment">#启动本地web服务</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> hexo d == hexo deploy<span class="comment">#部署播客到远端</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>常用组合</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  $</span><span class="bash"> hexo d -g <span class="comment">#生成部署</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> hexo s -g <span class="comment">#生成预览</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="1-2-4-Hexo主题设置"><a href="#1-2-4-Hexo主题设置" class="headerlink" title="1.2.4 Hexo主题设置"></a>1.2.4 Hexo主题设置</h3><p>这里以主题yilia为例进行说明（也就是本博客的主题啦）。</p><h4 id="1-2-4-1-安装主题"><a href="#1-2-4-1-安装主题" class="headerlink" title="1.2.4.1 安装主题"></a>1.2.4.1 安装主题</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  $</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><h4 id="1-2-4-2-更新主题"><a href="#1-2-4-2-更新主题" class="headerlink" title="1.2.4.2 更新主题"></a>1.2.4.2 更新主题</h4><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  $</span><span class="bash"> <span class="built_in">cd</span> themes/yilia</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> hexo g <span class="comment"># 生成</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> hexo s <span class="comment"># 启动本地web服务器</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>现在打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。</p><h2 id="1-3-本地Hexo部署到Github"><a href="#1-3-本地Hexo部署到Github" class="headerlink" title="1.3. 本地Hexo部署到Github"></a>1.3. 本地Hexo部署到Github</h2><p> 这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href="http://abc123.github.io访问了。不过很多教程文章对这个步骤语焉不详，这里着重说下。" target="_blank" rel="noopener">http://abc123.github.io访问了。不过很多教程文章对这个步骤语焉不详，这里着重说下。</a></p><blockquote><p>首先需要明白所谓部署到github的原理。</p></blockquote><blockquote><ol><li>之前步骤中在Github上创建的那个特别的repo（abc123.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href="http://abc123.github.io来直接访问。" target="_blank" rel="noopener">http://abc123.github.io来直接访问。</a></li><li>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</li><li>需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</li></ol></blockquote><h3 id="1-3-1-使用hexo-deploy部署"><a href="#1-3-1-使用hexo-deploy部署" class="headerlink" title="1.3.1. 使用hexo deploy部署"></a>1.3.1. 使用hexo deploy部署</h3><p>hexo deploy可以部署到很多平台，具体可以参考<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Hexo官网的这个链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:abc123/abc123.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>然后在命令行中执行</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>即可完成部署。</p><p>注意需要提前安装一个扩展：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>在实际操作过程中，我在”hexo d”这一步碰到了神奇的问题，希望能够帮到碰到类似问题的小伙伴，具体如下：<br>当我输入”hexo d”命令后，系统提示：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p><img src="https://i.loli.net/2019/08/18/ChR8GM6vJioxg7y.jpg" alt="05.jpg"></p><p>于是,根据linghucong 大的教程，进行安装:</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.9: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> + hexo-deployer-git@1.0.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> added 24 packages from 10 contributors and audited 9166 packages <span class="keyword">in</span> 37.295s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> found 1 low severity vulnerability</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>其实，这里已经明确报过错误信息啦：“npm WARN <a href="mailto:babel-eslint@10.0.2" target="_blank" rel="noopener">babel-eslint@10.0.2</a> requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.”<br>但我当时并木有看懂，就继续根据提示操作了下：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  $</span><span class="bash"> npm audit fix</span></span><br><span class="line">  npm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">  npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span><br><span class="line">  npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> up to date <span class="keyword">in</span> 5.492s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> fixed 0 of 1 vulnerability <span class="keyword">in</span> 9166 scanned packages</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">    1 vulnerability required manual review and could not be updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>但，并木有解决问题，于是又转回了报错的提示：“npm WARN <a href="mailto:babel-eslint@10.0.2" target="_blank" rel="noopener">babel-eslint@10.0.2</a> requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.”，google后的解决方案是：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ npm install eslint@4.x babel-eslint@8 --save-dev</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN deprecated circular-json@0.3.3: CircularJSON is <span class="keyword">in</span> maintenance only, flatted is its successor.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.9: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> + babel-eslint@8.2.6</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> + eslint@4.19.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> added 108 packages from 125 contributors, updated 12 packages and audited 9456 packages <span class="keyword">in</span> 63.142s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> found 1 low severity vulnerability</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>继续跟着提示操作：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ npm audit fix</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.9: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> up to date <span class="keyword">in</span> 7.582s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> fixed 0 of 1 vulnerability <span class="keyword">in</span> 9456 scanned packages</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   1 vulnerability required manual review and could not be updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>于是，这下就可以成功使用“$ npm install hexo-deployer-git –save”命令，安装扩展了：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.9: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> + hexo-deployer-git@1.0.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> updated 1 package and audited 9456 packages <span class="keyword">in</span> 23.449s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> found 1 low severity vulnerability</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>安装完“hexo-deployer-git”扩展后，本以为就阔以使用“$ hexo d”命令实现部署了，然而：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ hexo d</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Deploying: git</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Setting up Git deployment...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Initialized empty Git repository <span class="keyword">in</span> H:/blog/hexo/blog/.deploy_git/.git/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [master (root-commit) 5cd33de] First commit</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  1 file changed, 0 insertions(+), 0 deletions(-)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 placeholder</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Clearing .deploy_git folder...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Copying files from public folder...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Copying files from extend <span class="built_in">dirs</span>...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [master 06d32bd] Site updated: 2019-08-07 00:10:46</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  19 files changed, 2616 insertions(+)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 2019/07/25/hello-world/index.html</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 archives/2019/07/index.html</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 archives/2019/index.html</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 archives/index.html</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 fonts/default-skin.b257fa.svg</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 fonts/iconfont.16acc2.ttf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 fonts/iconfont.45d7ee.svg</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 fonts/iconfont.8c627f.woff</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 fonts/iconfont.b322fa.eot</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 fonts/tooltip.4004ff.svg</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 img/default-skin.png</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 img/preloader.gif</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 img/scrollbar_arrow.png</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 index.html</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 main.0cf68a.css</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 main.0cf68a.js</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 mobile.992cbe.js</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  delete mode 100644 placeholder</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 slider.e37972.js</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Permission denied (publickey).</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> fatal: Could not <span class="built_in">read</span> from remote repository.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Please make sure you have the correct access rights</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> and the repository exists.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Error: Spawn failed</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     at ChildProcess.&lt;anonymous&gt; (H:\blog\hexo\blog\node_modules\hexo-util\lib\spawn.js:52:19)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     at ChildProcess.emit (events.js:198:13)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     at ChildProcess.cp.emit (H:\blog\hexo\blog\node_modules\cross-spawn\lib\enoent.js:40:29)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>Permission denied，是的“Permission denied (publickey). fatal: Could not read from remote repository.”。这就是这步的报错信息啦，嗯，这表明，并木有成功配置GitHub 的ssh链接密钥，或者并没有生成ssh key，如不确定，可以在ternimal下执行：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　cd ~/.ssh ls</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>来查看是否有文件id_rsa以及文件id_rsa.pub</p><p>如果你没有ssh key的话，在ternimal下输入命令：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "youremail@example.com"，</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p> youremail@example.com 改为自己的邮箱即可，途中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（如果重新生成的话会覆盖之前的ssh key。）</p><blockquote><p>Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br>Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:(大概43位的字母、数字或符号的排布) <a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a></p></blockquote><p>进入github账户中</p><p>点击右上角图像，打开设置，里面有添加ssh密钥，将拷贝的公钥内容粘贴到里面，标签随便写，最好是让自己知道是哪一台主机的公钥。然后点击添加，这个时候就在github账户中添加好了ssh公钥</p><p><img src="https://i.loli.net/2019/08/19/zt6YEIdVHbfnqPj.jpg" alt="06.jpg"></p><p>这时候，就可以使用“$ hexo d”命令实现部署了：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ hexo d</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Deploying: git</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Clearing .deploy_git folder...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Copying files from public folder...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Copying files from extend <span class="built_in">dirs</span>...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> nothing to commit, working tree clean</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Counting objects: 32, <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Delta compression using up to 8 threads.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compressing objects: 100% (25/25), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Writing objects: 100% (32/32), 150.47 KiB | 1.95 MiB/s, <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Total 32 (delta 5), reused 0 (delta 0)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> remote: Resolving deltas: 100% (5/5), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> To github.com:abc123/abc123.github.io.git</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  * [new branch]      HEAD -&gt; master</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Branch master <span class="built_in">set</span> up to track remote branch master from git@github.com:abc123/abc123.github.io.git.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO  Deploy <span class="keyword">done</span>: git</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>部署结束后，可以运行</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/abc123/abc123.github.io.git .deploy/abc123.github.io</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>命令，将部署的文件同步回本地以归档，需要特别注意的是在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ git <span class="built_in">clone</span> https://github.com/abc123/abc123.github.io.git .deploy/abc123.github.io</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Cloning into <span class="string">'.deploy/yangluom.github.io'</span>...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> remote: Enumerating objects: 32, <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> remote: Total 32 (delta 0), reused 0 (delta 0), pack-reused 32</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Unpacking objects: 100% (32/32), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="1-4-开始“Hello，-World”之后的第一篇博客"><a href="#1-4-开始“Hello，-World”之后的第一篇博客" class="headerlink" title="1.4. 开始“Hello， World”之后的第一篇博客"></a>1.4. 开始“Hello， World”之后的第一篇博客</h2><h3 id="1-4-1-配置文件命名规则和路由地址"><a href="#1-4-1-配置文件命名规则和路由地址" class="headerlink" title="1.4.1 配置文件命名规则和路由地址"></a>1.4.1 配置文件命名规则和路由地址</h3><p><a href="https://www.jianshu.com/p/56d99a3049a5" target="_blank" rel="noopener">https://www.jianshu.com/p/56d99a3049a5</a></p><h3 id="1-4-2-创建博客"><a href="#1-4-2-创建博客" class="headerlink" title="1.4.2 创建博客"></a>1.4.2 创建博客</h3><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E5%86%99%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E5%86%99%E5%8D%9A%E5%AE%A2</a></p><p><a href="https://www.jianshu.com/p/56d99a3049a5" target="_blank" rel="noopener">https://www.jianshu.com/p/56d99a3049a5</a></p><p>定位到我们的hexo根目录，执行命令：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new 'my-first-blog'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>hexo会帮我们在./source/_posts下生成相关md文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll ./<span class="built_in">source</span>/_posts/</span></span><br><span class="line">total 24</span><br><span class="line">-rw-r--r-- 1 luyou 197609 18149 8月  19 01:12 2019-08-09-Hello-World之后.md</span><br><span class="line">-rw-r--r-- 1 luyou 197609   826 7月  25 21:09 hello-world.md</span><br></pre></td></tr></table></figure><h3 id="1-4-3-写作"><a href="#1-4-3-写作" class="headerlink" title="1.4.3 写作"></a>1.4.3 写作</h3><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><h3 id="1-4-4-发布"><a href="#1-4-4-发布" class="headerlink" title="1.4.4 发布"></a>1.4.4 发布</h3><p>部署修改<br>通过 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>部署本地的博客文件到github</p><p>上面的命令只是在操作正确的状态下可行，但是，实际操作中，大家都懂的，总有各种神奇的bug，比方我，再一次踩坑了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: _posts/2019-08-09-Hello-World之后.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br><span class="line"></span><br><span class="line">    ^</span><br><span class="line">    at generateError (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:167:10)</span><br><span class="line">    at throwError (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:173:9)</span><br><span class="line">    at readBlockMapping (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1073:9)</span><br><span class="line">    at composeNode (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1359:12)</span><br><span class="line">    at readDocument (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1519:3)</span><br><span class="line">    at loadDocuments (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1575:5)</span><br><span class="line">    at Object.load (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1596:19)</span><br><span class="line">    at parseYAML (H:\blog\hexo\blog\node_modules\hexo-front-matter\lib\front_matter.js:80:21)</span><br><span class="line">    at parse (H:\blog\hexo\blog\node_modules\hexo-front-matter\lib\front_matter.js:56:12)</span><br><span class="line">    at Promise.all.spread (H:\blog\hexo\blog\node_modules\hexo\lib\plugins\processor\post.js:48:20)</span><br><span class="line">    at tryCatcher (H:\blog\hexo\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:514:35)</span><br><span class="line">    at Promise._settlePromise (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:574:18)</span><br><span class="line">    at Promise._settlePromise0 (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:619:10)</span><br><span class="line">    at Promise._settlePromises (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:699:18)</span><br><span class="line">    at Promise._fulfill (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:643:18)</span><br><span class="line">    at PromiseArray._resolve (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:126:19)</span><br><span class="line">    at PromiseArray._promiseFulfilled (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:144:14)</span><br><span class="line">    at PromiseArray._iterate (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:114:31)</span><br><span class="line">    at PromiseArray.init [as _init] (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:78:10)</span><br><span class="line">    at Promise._settlePromise (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:571:21)</span><br><span class="line">    at Promise._settlePromise0 (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:619:10)</span><br><span class="line">INFO  Files loaded in 473 ms</span><br><span class="line">INFO  Generated: content.json</span><br><span class="line">INFO  1 files generated in 455 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: _posts/2019-08-09-Hello-World之后.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br><span class="line"></span><br><span class="line">    ^</span><br><span class="line">    at generateError (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:167:10)</span><br><span class="line">    at throwError (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:173:9)</span><br><span class="line">    at readBlockMapping (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1073:9)</span><br><span class="line">    at composeNode (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1359:12)</span><br><span class="line">    at readDocument (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1519:3)</span><br><span class="line">    at loadDocuments (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1575:5)</span><br><span class="line">    at Object.load (H:\blog\hexo\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1596:19)</span><br><span class="line">    at parseYAML (H:\blog\hexo\blog\node_modules\hexo-front-matter\lib\front_matter.js:80:21)</span><br><span class="line">    at parse (H:\blog\hexo\blog\node_modules\hexo-front-matter\lib\front_matter.js:56:12)</span><br><span class="line">    at Promise.all.spread (H:\blog\hexo\blog\node_modules\hexo\lib\plugins\processor\post.js:48:20)</span><br><span class="line">    at tryCatcher (H:\blog\hexo\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:514:35)</span><br><span class="line">    at Promise._settlePromise (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:574:18)</span><br><span class="line">    at Promise._settlePromise0 (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:619:10)</span><br><span class="line">    at Promise._settlePromises (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:699:18)</span><br><span class="line">    at Promise._fulfill (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:643:18)</span><br><span class="line">    at PromiseArray._resolve (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:126:19)</span><br><span class="line">    at PromiseArray._promiseFulfilled (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:144:14)</span><br><span class="line">    at PromiseArray._iterate (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:114:31)</span><br><span class="line">    at PromiseArray.init [as _init] (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise_array.js:78:10)</span><br><span class="line">    at Promise._settlePromise (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:571:21)</span><br><span class="line">    at Promise._settlePromise0 (H:\blog\hexo\blog\node_modules\bluebird\js\release\promise.js:619:10)</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>反复告诫自己，待人接物时，要看别人的行动，“嘴上说不要，身体很诚实”的节奏俯拾即是，然而，自己着手搞个博客这种东西就相对单纯很多，只要你错，结果就是被显示打一计耳光，还让自己摸不到头脑，看，这里又是：YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1。<br>这步的解决，是查到了<a href="https://www.cnblogs.com/wangyuehan/p/9864830.html" target="_blank" rel="noopener">王约翰的网络日志</a>,才解决掉“博客写好了，怎么发出去？我又错在哪了？真<strong><sup>TM</sup></strong>上火，教程咋又没写明的！！！”愤怒与困惑。。。。。。。。<br><img src="https://i.loli.net/2019/08/20/kl2zvna5HmRtSUr.jpg" alt="071.jpg"></p><p>修改结束后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 796 ms</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: content.json</span><br><span class="line">INFO  Generated: atom.xml</span><br><span class="line">INFO  Generated: blog/2019/07/25/hello-world/index.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2019/index.html</span><br><span class="line">INFO  Generated: archives/2019/07/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives/2019/08/index.html</span><br><span class="line">INFO  Generated: blog/2019/08/09/Hello-World之后/index.html</span><br><span class="line">INFO  Generated: tags/blog/index.html</span><br><span class="line">INFO  Generated: tags/GitPage/index.html</span><br><span class="line">INFO  12 files generated in 505 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>成功预览文章！</p><h1 id="2-其他进阶设置"><a href="#2-其他进阶设置" class="headerlink" title="2. 其他进阶设置"></a>2. 其他进阶设置</h1><h2 id="2-1-头像设置"><a href="#2-1-头像设置" class="headerlink" title="2.1 头像设置"></a>2.1 头像设置</h2><p>是滴，我，算是每一步都碰壁了吧。。。。。<br>头像设置照样搞了几天才在<a href="https://www.xiongtianci.com/2019/06/13/%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E8%B6%85%E8%B5%9E%E5%8D%9A%E5%AE%A2Hexo-NexT-GitHub-Pages%E7%9A%84%E8%B6%85%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">xiongtianci</a>的po文中找到了头像图片的位置的正确描述形式！</p><blockquote><p>avatar: /img/avatar.jpg</p></blockquote><p>实际路径是“themes/yilia/source/img/avatar.gif”, 但此处应写成“/img/avatar.jpg”<br>否则，要么找不到图片，要么，在url前面会加上“<a href="http://localhost:4000/”的路径，是滴，那种情况下，头像依然看不到。。。。" target="_blank" rel="noopener">http://localhost:4000/”的路径，是滴，那种情况下，头像依然看不到。。。。</a><br>解决后的情况就是这样了：</p><p><img src="https://i.loli.net/2019/08/20/CcQxgfmzB2Gdua4.jpg" alt="081.jpg"></p><h2 id="2-2-增加字数、阅读时长统计"><a href="#2-2-增加字数、阅读时长统计" class="headerlink" title="2.2 增加字数、阅读时长统计"></a>2.2 增加字数、阅读时长统计</h2><p>打开博客根目录、安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -save hexo-wordcount</span><br></pre></td></tr></table></figure><p>博客根目录_config.yml添加配置:</p><blockquote><p>word_count: true</p></blockquote><p>找到themes\yilia\layout_partial\article.ejs,在大概第七行</p><blockquote><p>&lt;%- partial(‘post/date’, {class_name: ‘archive-article-date’, date_format: null}) %&gt;</p></blockquote><p>下面添加代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">          &lt;%- partial('post/word') %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">最后在themes\yilia\layout\_partial\post目录下新建word.ejs,内容如下：</span><br><span class="line"></span><br><span class="line">&lt;div style="margin-top:10px;"&gt;</span><br><span class="line">    &lt;span class="post-time"&gt;</span><br><span class="line">      &lt;span class="post-meta-item-icon"&gt;</span><br><span class="line">        &lt;i class="fa fa-keyboard-o"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class="post-meta-item-text" style="font-size: 16px;color: grey"&gt;  字数统计: &lt;/span&gt;</span><br><span class="line">        &lt;!--这里样式可以自己定制--&gt;</span><br><span class="line">        &lt;span class="post-count" style="font-size: 16px;color: grey"&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;span class="post-time"&gt;</span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      &lt;span class="post-meta-item-icon"&gt;</span><br><span class="line">        &lt;i class="fa fa-hourglass-half"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class="post-meta-item-text" style="font-size: 16px;color: grey"&gt;  阅读时长: &lt;/span&gt;</span><br><span class="line">        &lt;span class="post-count" style="font-size: 16px;color: grey"&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2-3-增加卜算子统计"><a href="#2-3-增加卜算子统计" class="headerlink" title="2.3 增加卜算子统计"></a>2.3 增加卜算子统计</h2><p>主要参考Rayqian的博客<a href="https://qianlei6148.github.io/2018/10/09/hexo%E6%A8%A1%E7%89%88yilia%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/" target="_blank" rel="noopener">hexo模版yilia添加访问量</a>实现，具体做法很简单，就是在你的themes/yilia/layout/_partial/footer.ejs的“class=”footer-left””前添加脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在该文件的以下位置的下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;footer-right&quot;&gt;</span><br><span class="line">&lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;  Theme &lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot;&gt;Yilia&lt;/a&gt; by Litten</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>添加如下统计信息即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">      &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">          本站总访客:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; ||</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">          本站总访问量:&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次 ||</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;</span><br><span class="line">          本文总访问量:&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后就可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在本地查看啦，如果你发现数字很大，那是因为本地的测试地址大家都一样，你上传到github，再打开你的域名地址就会发现从0开始了！</p><p>目前的问题是，不蒜子的官方服务网站是<a href="http://service.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>，目前最大的弊端就是不开放注册，所以对于运行了一段时间的网站，不蒜子的数据都是从1开始，没办法设置，只有等后期开放注册之后，登入网站才能对统计计数进行设置。</p><h2 id="2-4-增加头像旋转动画"><a href="#2-4-增加头像旋转动画" class="headerlink" title="2.4 增加头像旋转动画"></a>2.4 增加头像旋转动画</h2><p>主要参考Rayqian的博客<a href="https://qianlei6148.github.io/2018/10/01/hexo%E6%A8%A1%E7%89%88yilia%E5%A4%B4%E5%83%8F%E5%A2%9E%E5%8A%A0%E6%97%8B%E8%BD%AC%E6%95%88%E6%9E%9C/" target="_blank" rel="noopener">hexo模版yilia头像增加旋转效果</a>实现<br>在themes\yilia\source\文件夹下新建一个css文件avatarrotation.css用来旋转360度<br>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.left-col #header .profilepic img &#123;</span><br><span class="line">/* 控制旋转速度时间*/</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.left-col #header .profilepic img:hover &#123;</span><br><span class="line">/* 鼠标经过360% */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在themes\yilia\layout_partial\head.ejs文件中添加创建的css文件：<br>找到&lt;%- partial(‘css’) %&gt;，在它的下面添加代码，把刚才写的文件添加进去，注意！！是在”&lt;%- partial(‘css’) %&gt;”这行的下面添加，否则，你懂的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.avatarrotation)&#123; %&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/./avatarrotation.css&quot;&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>最后在主题文件hexo\blog\themes\yilia\_config.yml中的结尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#头像是否旋转(如果不要旋转取false)</span><br><span class="line">avatarrotation: true</span><br></pre></td></tr></table></figure><p>头像就可以旋转了！</p><h2 id="2-5-增加文章目录"><a href="#2-5-增加文章目录" class="headerlink" title="2.5 增加文章目录"></a>2.5 增加文章目录</h2><p>直接在yilia目录下的_config.yml配置toc属性即可</p><blockquote><p>toc: 0    #不开启目录<br>toc: 1    #文章.md文件添加”toc:true”属性的才有目录<br>toc: 2    #所有文章开启目录</p></blockquote><p>注意！！！文章Markdown文件一定要从一级标题开始写，直接从二级标题无法生成目录！！！</p><h2 id="2-6-增加文章打开的动画"><a href="#2-6-增加文章打开的动画" class="headerlink" title="2.6 增加文章打开的动画"></a>2.6 增加文章打开的动画</h2><h2 id="2-7-增加了一个分类页面"><a href="#2-7-增加了一个分类页面" class="headerlink" title="2.7 增加了一个分类页面"></a>2.7 增加了一个分类页面</h2><h2 id="2-8-Yilia主题自定义左侧背景图片"><a href="#2-8-Yilia主题自定义左侧背景图片" class="headerlink" title="2.8 Yilia主题自定义左侧背景图片"></a>2.8 Yilia主题自定义左侧背景图片</h2><p>yilia模版左侧背景需要的话可以自己设置<br>首先打开themes\yilia\layout\layout.ejs<br>在最上面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% var left_default = &apos;#fff&apos;; %&gt;</span><br></pre></td></tr></table></figure><p>作为默认值，如果你不加图片，就会默认为白色<br>接着在layout.ejs文件中找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;left-col&quot; q-class=&quot;show:isShow&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在其中为它添加内联样式,结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;left-col&quot; q-class=&quot;show:isShow&quot; style=&quot;background: &lt;%= theme.style &amp;&amp; theme.style.left_ground ? theme.style.left_ground : left_default %&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>其中theme.style.left_ground中的left_ground就是主题配置文件_config.yml中style下的你所要添加的名称。<br>最后在主题的themes\yilia_config.yml中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 头像上面的背景颜色</span><br><span class="line"> header: &apos;rgba(0,0,0,0)&apos; #设置背景透明，不然头像上方是默认色</span><br><span class="line">#左侧头像板块的背景颜色</span><br><span class="line"> left_ground: &apos;url(/img/background.png)no-repeat 100%;background-size:cover;&apos;</span><br></pre></td></tr></table></figure><p>图像大小建议宽度490像素，高度1080像素</p><p>当然，如果需要修改左侧自己的名字、主页等字体的颜色的话，可以在\blog\themes\yilia\source\main.xxxxxx.css中搜索：</p><blockquote><p>.left-col #header a{color:</p></blockquote><p>将后面的#号后面的数字改成自己期望的字体颜色即可。<br>main.xxxxxx.css中xxxxxx是你自己的main.css文件之间的数字！</p><h2 id="2-9-增加版权声明（declare-true可开启）"><a href="#2-9-增加版权声明（declare-true可开启）" class="headerlink" title="2.9 增加版权声明（declare: true可开启）"></a>2.9 增加版权声明（declare: true可开启）</h2><h2 id="2-10-增加Google和百度收录"><a href="#2-10-增加Google和百度收录" class="headerlink" title="2.10 增加Google和百度收录"></a>2.10 增加Google和百度收录</h2><h3 id="2-10-1-提交给Google站长"><a href="#2-10-1-提交给Google站长" class="headerlink" title="2.10.1 提交给Google站长"></a>2.10.1 提交给Google站长</h3><h4 id="2-10-1-1-添加网址"><a href="#2-10-1-1-添加网址" class="headerlink" title="2.10.1.1 添加网址"></a>2.10.1.1 添加网址</h4><p>安装sitemap站点地图自动生成插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>在站点配置文件hexo\blog\themes\yilia_config.yml中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自动生成sitemap</span></span><br><span class="line">sitemap: </span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>注:上面的格式一定要正确，一定要有缩进。直接复制我的就行。<br>配置好后，执行hexo g 就能在hexo\blog\public中生成sitemap.xml和baidusitemap.xml了,其中第一个是要提交给google的，后面那个是提交给Baidu的。</p><h5 id="每次生成的-CNAME-都是-yoursite-com-怎么解决？"><a href="#每次生成的-CNAME-都是-yoursite-com-怎么解决？" class="headerlink" title="每次生成的 CNAME 都是 yoursite.com 怎么解决？"></a>每次生成的 CNAME 都是 yoursite.com 怎么解决？</h5><p>之前每一次hexo d -g 都会出现访问不了网站，需要手动在github page的setting里重新设置一下，下面就是解决方案。</p><p>修改 _config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: http://abc123.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h3 id="2-10-2-提交给Google站长"><a href="#2-10-2-提交给Google站长" class="headerlink" title="2.10.2 提交给Google站长"></a>2.10.2 提交给Google站长</h3><p>进入Google Search Console，相信大家都有Google账号吧。没有的话注册个账号吧，然后登录进去即可。</p><p>Google会让你验证你对网站的所有权，所以在这里用的是网址前缀。</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;  知道Github能做博客已经有相当长一段时间了，但是，由于能力、精力等多种因素的限制，博客一直处于下图的状态：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/09/rQ81lwcifpyDeTs.jpg&quot; alt=&quot;01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;  说来，十分惭愧，这篇blog也已经从最初的8.09写到了08.12。&lt;br&gt;  作为“Hello， World！”之后的第一篇博客，主要是给自己使用GitPage搭建Blog做个记录，当然，如果能够帮助到后来的小伙伴们，那就更好啦！&lt;br&gt;  工欲善其事必先利其器，然额，贯于GitPage搭建bolg的步骤，目前网上的各种教程较为分散，主要是以成功的在GitPage上成功实现Fork及访问为主，所以，也给很多小伙伴带来了神奇的困惑，自然而然冒出来的问题便是，然后嘞？然后我再咋搞呢？所以，本着如何较系统地从入门到实践的角度，记录下本次从搭建到第一篇博客发布的过程，也算是从本人的角度对使用Github Page搭建博客过程的一个Trouble Shotting的记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://yangluom.github.io/tags/blog/"/>
    
      <category term="GitPage" scheme="https://yangluom.github.io/tags/GitPage/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yangluom.github.io//blog/2019/07/25/hello-world/"/>
    <id>https://yangluom.github.io//blog/2019/07/25/hello-world/</id>
    <published>2019-07-25T13:09:53.914Z</published>
    <updated>2019-08-19T16:03:45.347Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure> <a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
